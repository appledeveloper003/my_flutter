// Autogenerated from Pigeon (v19.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct User {
  var id: String
  var name: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> User? {
    let id = __pigeon_list[0] as! String
    let name: String? = nilOrValue(__pigeon_list[1])

    return User(
      id: id,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterPost {
  var userId: Int64
  var id: Int64
  var title: String
  var body: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> FlutterPost? {
    let userId = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let id = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let title = __pigeon_list[2] as! String
    let body = __pigeon_list[3] as! String

    return FlutterPost(
      userId: userId,
      id: id,
      title: title,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      id,
      title,
      body,
    ]
  }
}
private class ModuleNativeCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return User.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ModuleNativeCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? User {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ModuleNativeCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ModuleNativeCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ModuleNativeCodecWriter(data: data)
  }
}

class ModuleNativeCodec: FlutterStandardMessageCodec {
  static let shared = ModuleNativeCodec(readerWriter: ModuleNativeCodecReaderWriter())
}

/// Flutter -> Native communication
/// Requires implementation on Native side
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ModuleNative {
  func getUser(userId: String) throws -> User
  func closePosts() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ModuleNativeSetup {
  /// The codec used by ModuleNative.
  static var codec: FlutterStandardMessageCodec { ModuleNativeCodec.shared }
  /// Sets up an instance of `ModuleNative` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ModuleNative?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.my_flutter.ModuleNative.getUser\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        do {
          let result = try api.getUser(userId: userIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUserChannel.setMessageHandler(nil)
    }
    let closePostsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.my_flutter.ModuleNative.closePosts\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closePostsChannel.setMessageHandler { _, reply in
        do {
          try api.closePosts()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      closePostsChannel.setMessageHandler(nil)
    }
  }
}
private class ModuleFlutterCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return FlutterPost.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ModuleFlutterCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? FlutterPost {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ModuleFlutterCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ModuleFlutterCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ModuleFlutterCodecWriter(data: data)
  }
}

class ModuleFlutterCodec: FlutterStandardMessageCodec {
  static let shared = ModuleFlutterCodec(readerWriter: ModuleFlutterCodecReaderWriter())
}

/// Native -> Flutter communicaton
/// Requires implementation on Flutter side
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ModuleFlutterProtocol {
  func reset(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func showPosts(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func showSelectedPost(post postArg: FlutterPost, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class ModuleFlutter: ModuleFlutterProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FlutterStandardMessageCodec {
    return ModuleFlutterCodec.shared
  }
  func reset(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.my_flutter.ModuleFlutter.reset\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func showPosts(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.my_flutter.ModuleFlutter.showPosts\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func showSelectedPost(post postArg: FlutterPost, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.my_flutter.ModuleFlutter.showSelectedPost\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([postArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
